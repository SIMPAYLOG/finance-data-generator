plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.simpaylog'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}
subprojects {
	apply plugin: 'java'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	repositories {
		mavenCentral()
	}
	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		compileOnly 'org.projectlombok:lombok'
		annotationProcessor 'org.projectlombok:lombok'
		runtimeOnly 'org.postgresql:postgresql'
		runtimeOnly("com.h2database:h2")
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		implementation 'com.fasterxml.jackson.core:jackson-databind'
		implementation 'org.springframework.kafka:spring-kafka'                    // Kafka 기본 (블로킹) 프로듀서/컨슈머 - 필요시 사용
		implementation 'io.projectreactor.kafka:reactor-kafka'                      // WebFlux용 논블로킹 Kafka 클라이언트 (반드시 추가)
		implementation 'org.springframework.boot:spring-boot-starter-data-elasticsearch' //ES 구문을 JPA와 비슷하게 사용 가능하도록 해줌
		implementation 'org.apache.commons:commons-csv:1.11.0'
		implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
		implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	}
}

tasks.bootJar {
	enabled = false
}

tasks.named('test') {
	useJUnitPlatform()
}
